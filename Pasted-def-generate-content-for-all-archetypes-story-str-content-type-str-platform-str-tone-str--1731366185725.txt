def generate_content_for_all_archetypes(story: str, content_type: str, platform: str, tone: str) -> Dict[str, Any]:
    """Generate content for all archetypes simultaneously"""
    archetypes = {
        'autonomous': {
            'tone': 'professional and data-driven',
            'focus': 'efficiency and results',
            'style': 'detailed and analytical'
        },
        'impulsive': {
            'tone': 'urgent and emotional',
            'focus': 'immediate benefits',
            'style': 'dynamic and engaging'
        },
        'avoidant': {
            'tone': 'gentle and reassuring',
            'focus': 'comfort and simplicity',
            'style': 'clear and comforting'
        },
        'isolated': {
            'tone': 'respectful and private',
            'focus': 'independence and control',
            'style': 'detailed and personal'
        }
    }
    
    results = {}
    
    for archetype, traits in archetypes.items():
        prompt = f"""
        Story: {story}
        Content Type: {content_type}
        Platform: {platform}
        Base Tone: {tone}
        
        Archetype: {archetype}
        Archetype Tone: {traits['tone']}
        Content Focus: {traits['focus']}
        Writing Style: {traits['style']}
        """
        
        try:
            content = generate_marketing_content(prompt, archetype)
            
            # Get emotional profile
            emotional_profile = st.session_state.emotion_engine.analyze_emotional_context(
                archetype=archetype,
                brand_values=st.session_state.brand_values,
                audience_data={'archetype': archetype}
            )
            
            content['emotional_profile'] = {
                'primary_emotion': emotional_profile.primary_emotion,
                'intensity': emotional_profile.intensity,
                'triggers': emotional_profile.psychological_triggers
            }
            
            results[archetype] = content
            
        except Exception as e:
            results[archetype] = {
                'error': str(e),
                'content': f"Error generating content for {archetype}"
            }
    
    return results

def render_content_generator():
    # ... (previous code remains the same until the generate button) ...
    
    if st.button("Generate Content"):
        if not story.strip():
            st.error("Please enter a story to generate content.")
            return
            
        with st.spinner("Generating content for all archetypes..."):
            try:
                # Generate content for all archetypes
                all_content = generate_content_for_all_archetypes(
                    story=sanitize_input(story),
                    content_type=content_type,
                    platform=platform,
                    tone=tone
                )
                
                st.session_state.content_form_state['generated_content'] = all_content
                
                # Save to database
                for archetype, content in all_content.items():
                    if content and content.get('content'):
                        db.save_campaign(
                            business_name=f"{story[:50]}_{archetype}",
                            campaign_type=content_type,
                            content=content['content'],
                            emotional_profile=content.get('emotional_profile', {})
                        )
                
                st.rerun()
                
            except Exception as e:
                st.error(f"Error generating content: {str(e)}")

    # Right column - Display all generated content
    with col2:
        st.markdown('<div class="card-container">', unsafe_allow_html=True)
        st.markdown("<h2>Generated Content by Archetype</h2>", unsafe_allow_html=True)
        
        if st.session_state.content_form_state.get('generated_content'):
            tabs = st.tabs([
                "Autonomous", "Impulsive", "Avoidant", "Isolated"
            ])
            
            for tab, (archetype, content) in zip(tabs, 
                st.session_state.content_form_state['generated_content'].items()):
                with tab:
                    if content.get('error'):
                        st.error(content['error'])
                        continue
                        
                    # Display emotional profile
                    if content.get('emotional_profile'):
                        with st.expander("Emotional Analysis"):
                            st.write("Primary Emotion:", 
                                   content['emotional_profile']['primary_emotion'])
                            st.write("Emotional Intensity:", 
                                   f"{content['emotional_profile']['intensity']:.2f}")
                            st.write("Psychological Triggers:", 
                                   ", ".join(content['emotional_profile']['triggers']))
                    
                    # Display content sections
                    if content.get('title'):
                        st.markdown(f"### {content['title']}")
                        st.markdown("---")
                    
                    if content.get('content'):
                        st.markdown("### Content")
                        st.markdown(content['content'])
                        st.markdown("---")
                    
                    if content.get('keywords'):
                        st.markdown("### Keywords")
                        st.markdown(", ".join(content['keywords']))
                        st.markdown("---")
                    
                    if content.get('target_audience'):
                        st.markdown("### Target Audience")
                        st.markdown(content['target_audience'])
                    
                    # Download button for this archetype
                    if content.get('content'):
                        download_content = f"""
                        Archetype: {archetype.upper()}
                        
                        Title: {content.get('title', '')}
                        
                        Content:
                        {content.get('content', '')}
                        
                        Keywords:
                        {', '.join(content.get('keywords', []))}
                        
                        Target Audience:
                        {content.get('target_audience', '')}
                        
                        Emotional Analysis:
                        Primary Emotion: {content.get('emotional_profile', {}).get('primary_emotion', 'N/A')}
                        Emotional Intensity: {content.get('emotional_profile', {}).get('intensity', 'N/A')}
                        Psychological Triggers: {', '.join(content.get('emotional_profile', {}).get('triggers', []))}
                        """
                        
                        st.download_button(
                            f"Export {archetype.capitalize()} Content",
                            download_content,
                            file_name=f"{archetype}_{content.get('title', 'generated').lower().replace(' ', '_')}.txt",
                            mime="text/plain"
                        )
        else:
            st.markdown('<p class="generated-content-placeholder">Generated content will appear here...</p>', 
                       unsafe_allow_html=True)