import streamlit as st
from ai_utils import generate_marketing_content
from database import db
import json
import html

def initialize_session_state():
    """Initialize session state variables if they don't exist"""
    if 'content_form_state' not in st.session_state:
        st.session_state.content_form_state = {
            'story': '',
            'content_type': '',
            'platform': '',
            'tone': '',
            'competitor_insights': '',
            'generated_content': None
        }

def render_content_generator():
    # Apply custom styles
    st.markdown("""
        <style>
        .main { background-color: #F9F9FB !important; padding-top: 40px !important; }
        .stApp { background-color: #F9F9FB !important; }
        .card-container {
            background-color: #FFFFFF;
            border-radius: 16px;
            padding: 32px;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.03);
            height: 100%;
            margin-bottom: 2rem;
        }
        </style>
    """, unsafe_allow_html=True)

    # Initialize session state
    initialize_session_state()

    # Header with logo and Go back button
    col1, col2 = st.columns([1, 11])
    with col1:
        st.image("logoclio.png", width=60)
    
    # Main content area with two columns
    col1, col2 = st.columns(2, gap="large")

    # Left column - Input form
    with col1:
        st.markdown('<div class="card-container">', unsafe_allow_html=True)
        
        st.markdown('<p class="label-text">What would you like to talk about?</p>', unsafe_allow_html=True)
        story = st.text_area(
            "Story Input",
            value=st.session_state.content_form_state['story'],
            placeholder="What is the story you want to tell",
            label_visibility="collapsed"
        )

        content_type = st.selectbox(
            "Content Type",
            options=["", "Blog Post", "Social Media Post", "Email Newsletter", "Landing Page"],
            key="content_type",
            label_visibility="collapsed"
        )

        platform = st.selectbox(
            "Platform",
            options=["", "Website", "LinkedIn", "Twitter", "Instagram", "Facebook"],
            key="platform",
            label_visibility="collapsed"
        )

        tone = st.selectbox(
            "Emotional tone",
            options=["", "Professional", "Casual", "Inspirational", "Educational", "Persuasive"],
            key="tone",
            label_visibility="collapsed"
        )

        competitor_insights = st.text_area(
            "Competitor Insights",
            value=st.session_state.content_form_state['competitor_insights'],
            placeholder="Add any competitor insights or success strategies",
            label_visibility="collapsed"
        )
        
        if st.button("Generate Content"):
            with st.spinner("Generating content..."):
                try:
                    prompt = f"""
                    Story: {story}
                    Content Type: {content_type}
                    Platform: {platform}
                    Tone: {tone}
                    Competitor Insights: {competitor_insights}
                    """
                    
                    content = generate_marketing_content(prompt, content_type)
                    st.session_state.content_form_state['generated_content'] = content
                    
                    # Save to database if content was generated successfully
                    if content and content.get('content'):
                        db.save_campaign(
                            business_name=story[:50],
                            campaign_type=content_type,
                            content=content['content']
                        )
                    
                    st.rerun()
                    
                except Exception as e:
                    st.error(f"Error generating content: {str(e)}")
        
        st.markdown('</div>', unsafe_allow_html=True)

    # Right column - Generated content
    with col2:
        st.markdown('<div class="card-container">', unsafe_allow_html=True)
        st.markdown("<h2>Content Marketing Generator</h2>", unsafe_allow_html=True)
        
        if st.session_state.content_form_state.get('generated_content'):
            content = st.session_state.content_form_state['generated_content']
            st.success("Content generated successfully!")
            
            # Title
            if content.get('title'):
                st.markdown(f"### {content['title']}")
                st.markdown("---")
            
            # Content
            if content.get('content'):
                st.markdown("### Content")
                st.markdown(content['content'])
                st.markdown("---")
            
            # Keywords
            if content.get('keywords'):
                st.markdown("### Keywords")
                if isinstance(content['keywords'], list):
                    st.markdown(", ".join(content['keywords']))
                else:
                    st.markdown(content['keywords'])
                st.markdown("---")
            
            # Target Audience
            if content.get('target_audience'):
                st.markdown("### Target Audience")
                st.markdown(content['target_audience'])
            
            # Download button
            if content.get('content'):
                download_content = f"""
                Title: {content.get('title', '')}
                
                Content:
                {content.get('content', '')}
                
                Keywords:
                {', '.join(content.get('keywords', [])) if isinstance(content.get('keywords'), list) else content.get('keywords', '')}
                
                Target Audience:
                {content.get('target_audience', '')}
                """
                
                st.download_button(
                    "Export Content",
                    download_content,
                    file_name=f"content_{content.get('title', 'generated').lower().replace(' ', '_')}.txt",
                    mime="text/plain"
                )
            
            # Debug button
            if st.button("Debug"):
                st.write("Content in session state:", st.session_state.content_form_state.get('generated_content'))
        
        else:
            st.markdown('<p class="generated-content-placeholder">Generated content will appear here...</p>', 
                       unsafe_allow_html=True)
        
        st.markdown('</div>', unsafe_allow_html=True)

if __name__ == "__main__":
    render_content_generator()