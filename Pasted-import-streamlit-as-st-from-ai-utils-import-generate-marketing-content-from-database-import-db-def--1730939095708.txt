import streamlit as st
from ai_utils import generate_marketing_content
from database import db

def initialize_session_state():
    """Initialize session state variables if they don't exist"""
    if 'form_data' not in st.session_state:
        st.session_state.form_data = {
            'business_name': '',
            'business_description': '',
            'content_type': '',
            'format': '',
            'length': '',
            'tone': ''
        }
    if 'generated_content' not in st.session_state:
        st.session_state.generated_content = None

def update_session_state(key, value):
    """Update session state with form data"""
    st.session_state.form_data[key] = value

def render_content_generator():
    initialize_session_state()
    
    st.markdown("## Content Marketing Generator")
    
    with st.form(key='content_generator_form'):
        # Business Information
        col1, col2 = st.columns(2)
        
        with col1:
            business_name = st.text_input(
                "Business Name",
                value=st.session_state.form_data['business_name'],
                key='business_name_input',
                on_change=lambda: update_session_state('business_name', st.session_state.business_name_input)
            )

            business_description = st.text_area(
                "Business Description",
                value=st.session_state.form_data['business_description'],
                key='business_description_input',
                on_change=lambda: update_session_state('business_description', st.session_state.business_description_input)
            )

        with col2:
            content_types = [
                "Blog Post",
                "Social Media Post",
                "Email Newsletter",
                "Landing Page Copy"
            ]
            
            selected_type = st.selectbox(
                "Content Type",
                options=content_types,
                key='content_type_input',
                index=content_types.index(st.session_state.form_data['content_type']) if st.session_state.form_data['content_type'] in content_types else 0,
                on_change=lambda: update_session_state('content_type', st.session_state.content_type_input)
            )

            formats = {
                "Blog Post": ["How-to Guide", "Industry Analysis", "Case Study", "List Article"],
                "Social Media Post": ["Text Post", "Image Caption", "Poll", "Story"],
                "Email Newsletter": ["Welcome Series", "Product Update", "Industry News", "Educational"],
                "Landing Page Copy": ["Product Launch", "Service Offering", "Lead Magnet", "Event Registration"]
            }

            selected_format = st.selectbox(
                "Format",
                options=formats.get(selected_type, []),
                key='format_input',
                on_change=lambda: update_session_state('format', st.session_state.format_input)
            )

            content_lengths = ["Short", "Medium", "Long"]
            selected_length = st.selectbox(
                "Content Length",
                options=content_lengths,
                key='length_input',
                on_change=lambda: update_session_state('length', st.session_state.length_input)
            )

            content_tones = ["Professional", "Casual", "Enthusiastic", "Educational", "Persuasive"]
            selected_tone = st.selectbox(
                "Content Tone",
                options=content_tones,
                key='tone_input',
                on_change=lambda: update_session_state('tone', st.session_state.tone_input)
            )

        # Submit button
        submit_button = st.form_submit_button("Generate Content")

        if submit_button:
            if business_name and business_description:
                with st.spinner("Generating content..."):
                    try:
                        content = generate_marketing_content(
                            business_name=business_name,
                            business_description=business_description,
                            content_type=selected_type,
                            format=selected_format,
                            length=selected_length,
                            tone=selected_tone
                        )
                        
                        st.session_state.generated_content = content
                        
                        # Save to database
                        db.save_campaign(
                            business_name=business_name,
                            content_type=selected_type,
                            content=content['content']
                        )
                    except Exception as e:
                        st.error(f"Error generating content: {str(e)}")
                        return
            else:
                st.error("Please fill in all required fields.")

    # Display generated content outside the form
    if st.session_state.generated_content:
        st.markdown("### Generated Content")
        
        # Content display
        with st.expander("View Generated Content", expanded=True):
            st.markdown(f"**Title:** {st.session_state.generated_content['title']}")
            st.markdown("**Content:**")
            st.markdown(st.session_state.generated_content['content'])
            st.markdown("**Keywords:**")
            for keyword in st.session_state.generated_content['keywords']:
                st.markdown(f"- {keyword}")

        # Action buttons
        col1, col2 = st.columns(2)
        with col1:
            if st.button("Save Content"):
                try:
                    db.save_campaign(
                        business_name=business_name,
                        content_type=selected_type,
                        content=st.session_state.generated_content['content']
                    )
                    st.success("Content saved successfully!")
                except Exception as e:
                    st.error(f"Error saving content: {str(e)}")

        with col2:
            st.download_button(
                "Export Content",
                st.session_state.generated_content['content'],
                file_name=f"{business_name}_content.txt",
                mime="text/plain"
            )

if __name__ == "__main__":
    render_content_generator()