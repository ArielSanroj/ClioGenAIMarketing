import streamlit as st
import pandas as pd
from datetime import datetime
from typing import Dict, List
import json
from transformers import pipeline
from sklearn.preprocessing import StandardScaler
import numpy as np
from dataclasses import dataclass, asdict
from marketing_campaign_system import (
    ContentMarketingCampaign,
    BuyerPersona,
    ContentPiece,
    MarketingGoal
)

class EnhancedContentGenerator:
    def __init__(self):
        self.campaign = ContentMarketingCampaign("Dynamic Campaign")
        self.sentiment_analyzer = pipeline("sentiment-analysis")
        self.tone_analyzer = pipeline("text-classification", model="j-hartmann/emotion-english-distilroberta-base")
        
    def analyze_business_context(self, business_name: str, description: str) -> Dict:
        """Analyze business context to inform content generation"""
        analysis = {
            'industry_keywords': self._extract_keywords(description),
            'tone': self._analyze_tone(description),
            'target_segments': self._identify_target_segments(description),
            'unique_selling_points': self._extract_usp(description)
        }
        return analysis
    
    def _extract_keywords(self, text: str) -> List[str]:
        """Extract relevant keywords from text using NLP"""
        # Simplified keyword extraction
        words = text.lower().split()
        # Remove common words and keep relevant business terms
        business_terms = [word for word in words if len(word) > 3]
        return list(set(business_terms))[:5]
    
    def _analyze_tone(self, text: str) -> str:
        """Analyze the emotional tone of the text"""
        result = self.tone_analyzer(text)[0]
        return result['label']
    
    def _identify_target_segments(self, description: str) -> List[str]:
        """Identify potential target audience segments"""
        # Simplified segment identification
        segments = []
        if 'b2b' in description.lower():
            segments.append('Business Decision Makers')
        if 'consumer' in description.lower():
            segments.append('General Consumers')
        return segments or ['General Audience']
    
    def _extract_usp(self, description: str) -> List[str]:
        """Extract unique selling points from description"""
        # Simple USP extraction based on key phrases
        usps = []
        sentences = description.split('.')
        for sentence in sentences:
            if any(keyword in sentence.lower() for keyword in ['unique', 'best', 'leading', 'innovative']):
                usps.append(sentence.strip())
        return usps or ['General Business Solutions']

def render_enhanced_content_generator():
    st.set_page_config(page_title="Advanced Content Marketing Generator", layout="wide")
    
    # Initialize generator
    generator = EnhancedContentGenerator()
    
    # Sidebar for campaign settings
    with st.sidebar:
        st.header("Campaign Settings")
        campaign_name = st.text_input("Campaign Name", "Q4 2024 Campaign")
        campaign_goal = st.selectbox(
            "Primary Goal",
            ["Brand Awareness", "Lead Generation", "Sales", "Customer Engagement"]
        )
        
    # Main content area
    st.title("AI-Powered Content Marketing Generator")
    
    # Business Information
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Business Information")
        business_name = st.text_input("Business Name")
        business_description = st.text_area("Business Description", height=150)
        
        if business_description:
            analysis = generator.analyze_business_context(business_name, business_description)
            
            st.subheader("Business Analysis")
            st.json(analysis)
    
    with col2:
        st.subheader("Content Configuration")
        
        content_types = {
            "Blog Post": {
                "formats": ["How-to Guide", "Industry Analysis", "Case Study", "List Article"],
                "lengths": ["Short (500 words)", "Medium (1000 words)", "Long (2000+ words)"]
            },
            "Social Media Post": {
                "platforms": ["LinkedIn", "Twitter", "Instagram", "Facebook"],
                "formats": ["Text", "Image Caption", "Poll", "Story"]
            },
            "Email Newsletter": {
                "types": ["Welcome Series", "Product Update", "Industry News", "Educational"],
                "lengths": ["Brief", "Standard", "Detailed"]
            },
            "Landing Page Copy": {
                "purposes": ["Product Launch", "Service Offering", "Lead Magnet", "Event Registration"],
                "styles": ["Minimal", "Detailed", "Storytelling"]
            }
        }
        
        selected_type = st.selectbox("Content Type", list(content_types.keys()))
        
        # Dynamic options based on content type
        if selected_type == "Blog Post":
            format_type = st.selectbox("Format", content_types[selected_type]["formats"])
            length = st.selectbox("Length", content_types[selected_type]["lengths"])
        elif selected_type == "Social Media Post":
            platform = st.selectbox("Platform", content_types[selected_type]["platforms"])
            format_type = st.selectbox("Format", content_types[selected_type]["formats"])
        elif selected_type == "Email Newsletter":
            email_type = st.selectbox("Newsletter Type", content_types[selected_type]["types"])
            length = st.selectbox("Length", content_types[selected_type]["lengths"])
        else:
            purpose = st.selectbox("Purpose", content_types[selected_type]["purposes"])
            style = st.selectbox("Style", content_types[selected_type]["styles"])
            
        tone_options = ["Professional", "Casual", "Enthusiastic", "Educational", "Persuasive"]
        selected_tone = st.selectbox("Content Tone", tone_options)
    
    # Generate Content Button
    if st.button("Generate Content", type="primary"):
        if business_name and business_description:
            with st.spinner("Analyzing and generating optimized content..."):
                # Create content piece
                content = ContentPiece(
                    title=f"{business_name} - {selected_type}",
                    content_type=selected_type,
                    target_persona="General Audience",
                    emotional_tone=selected_tone,
                    keywords=generator.analyze_business_context(business_name, business_description)['industry_keywords'],
                    content_body="",  # Will be generated
                    created_at=datetime.now()
                )
                
                # Optimize and predict performance
                content = generator.campaign.optimize_content(content)
                performance_prediction = generator.campaign.predict_content_performance(content)
                
                # Display Results
                st.subheader("Generated Content")
                tabs = st.tabs(["Content", "SEO Analysis", "Performance Prediction", "Distribution Strategy"])
                
                with tabs[0]:
                    st.markdown(f"**Title:** {content.title}")
                    st.markdown("**Content:**")
                    st.text_area("", content.content_body, height=300)
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        st.download_button(
                            "Export Content",
                            content.content_body,
                            file_name=f"{business_name}_{selected_type}.txt",
                            mime="text/plain"
                        )
                    with col2:
                        if st.button("Save to Campaign"):
                            generator.campaign.content_pieces.append(content)
                            st.success("Content saved to campaign!")
                
                with tabs[1]:
                    st.markdown("### SEO Analysis")
                    st.markdown("**Target Keywords:**")
                    for keyword in content.keywords:
                        st.markdown(f"- {keyword}")
                    
                    # Keyword difficulty and volume metrics would be added here
                    
                with tabs[2]:
                    st.markdown("### Performance Prediction")
                    st.json(performance_prediction)
                    
                with tabs[3]:
                    st.markdown("### Recommended Distribution Channels")
                    channels = generator.campaign._get_recommended_channels(content)
                    for channel in channels:
                        st.markdown(f"- {channel}")
                    
                    # Channel-specific recommendations
                    st.markdown("### Posting Schedule")
                    schedule_df = pd.DataFrame({
                        'Channel': channels,
                        'Best Time': ['9:00 AM', '12:00 PM', '3:00 PM'],
                        'Expected Engagement': ['High', 'Medium', 'High']
                    })
                    st.dataframe(schedule_df)
        else:
            st.error("Please fill in all required fields.")
            
    # Display campaign insights if content has been generated
    if generator.campaign.content_pieces:
        st.subheader("Campaign Insights")
        metrics = generator.campaign.track_performance()
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Content Pieces", len(generator.campaign.content_pieces))
        with col2:
            st.metric("Avg. Engagement Rate", f"{metrics['engagement_rate']}%")
        with col3:
            st.metric("Estimated ROI", f"{metrics['roi']}%")

if __name__ == "__main__":
    render_enhanced_content_generator()