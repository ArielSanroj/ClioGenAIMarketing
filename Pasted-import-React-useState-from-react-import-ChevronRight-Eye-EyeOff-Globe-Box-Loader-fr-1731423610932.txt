import React, { useState } from 'react';
import { ChevronRight, Eye, EyeOff, Globe, Box, Loader } from 'lucide-react';

const RegistrationFlow = () => {
  const [step, setStep] = useState(1);
  const [showPassword, setShowPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    name: '',
    surname: '',
    cellphone: '',
    purpose: ''
  });

  const handleInputChange = (e) => {
    setError('');
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setIsLoading(true);

    try {
      // Replace with your actual API endpoint
      const response = await fetch('/api/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData)
      });

      if (!response.ok) {
        throw new Error('Registration failed');
      }

      const data = await response.json();
      
      if (step < 3) {
        setStep(step + 1);
      } else {
        // Handle successful registration
        console.log('Registration successful:', data);
        // Redirect to dashboard or show success message
      }
    } catch (err) {
      setError('Failed to register. Please try again.');
      console.error('Registration error:', err);
    } finally {
      setIsLoading(false);
    }
  };

  const handleSocialLogin = async (provider) => {
    setError('');
    setIsLoading(true);

    try {
      // Replace with your actual social login endpoint
      const response = await fetch(`/api/auth/${provider}`, {
        method: 'POST'
      });

      if (!response.ok) {
        throw new Error(`${provider} login failed`);
      }

      const data = await response.json();
      // Handle successful social login
      console.log(`${provider} login successful:`, data);
    } catch (err) {
      setError(`${provider} login failed. Please try again.`);
      console.error(`${provider} login error:`, err);
    } finally {
      setIsLoading(false);
    }
  };

  // Rest of the component remains the same, but update buttons to show loading state
  const renderStep1 = () => (
    <form onSubmit={handleSubmit} className="w-full max-w-md p-6 space-y-4">
      <div className="text-center mb-8">
        <h1 className="text-2xl font-bold">Welcome to Clio AI</h1>
      </div>
      
      {error && (
        <div className="bg-red-50 text-red-500 p-3 rounded-md text-sm">
          {error}
        </div>
      )}
      
      <div className="space-y-4">
        <div>
          <input
            type="email"
            name="email"
            placeholder="Email address"
            className="w-full p-2 border rounded-md"
            value={formData.email}
            onChange={handleInputChange}
            required
            disabled={isLoading}
          />
        </div>
        
        <div className="relative">
          <input
            type={showPassword ? "text" : "password"}
            name="password"
            placeholder="Password"
            className="w-full p-2 border rounded-md"
            value={formData.password}
            onChange={handleInputChange}
            required
            minLength={6}
            disabled={isLoading}
          />
          <button 
            type="button"
            onClick={() => setShowPassword(!showPassword)}
            className="absolute right-2 top-2.5 text-gray-500"
            disabled={isLoading}
          >
            {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}
          </button>
        </div>

        <button 
          type="submit"
          className="w-full bg-blue-600 text-white p-2 rounded-md hover:bg-blue-700 flex items-center justify-center gap-2"
          disabled={isLoading}
        >
          {isLoading ? <Loader className="animate-spin" size={20} /> : null}
          Continue
        </button>

        <div className="space-y-2">
          <button 
            type="button"
            className="w-full border p-2 rounded-md flex items-center justify-center gap-2"
            onClick={() => handleSocialLogin('google')}
            disabled={isLoading}
          >
            <Globe size={20} />
            Sign Up with Google
          </button>
          <button 
            type="button"
            className="w-full border p-2 rounded-md flex items-center justify-center gap-2"
            onClick={() => handleSocialLogin('microsoft')}
            disabled={isLoading}
          >
            <Box size={20} />
            Sign Up with Microsoft
          </button>
        </div>
      </div>
    </form>
  );

  // ... rest of the component remains the same, just add isLoading to buttons and disable during loading
  
  return (
    <div className="min-h-screen bg-gradient-to-br from-amber-50 to-amber-100 flex flex-col items-center justify-center">
      <div className="mb-8">
        <div className="w-16 h-16 relative">
          <div className="w-16 h-16 border-4 border-amber-400 rounded-full" />
          <div className="absolute top-0 right-0 flex space-x-1">
            <div className="w-3 h-3 bg-blue-600 rounded-full" />
            <div className="w-3 h-3 bg-purple-600 rounded-full" />
            <div className="w-3 h-3 bg-red-500 rounded-full" />
          </div>
        </div>
      </div>

      <div className="bg-white rounded-lg shadow-xl w-full max-w-md">
        {step === 1 && renderStep1()}
        {step === 2 && renderStep2()}
        {step === 3 && renderStep3()}
      </div>

      <div className="mt-8 text-sm text-gray-600 flex gap-4">
        <a href="#" className="hover:text-gray-900">Contact Us</a>
        <a href="#" className="hover:text-gray-900">Privacy Policy</a>
      </div>
    </div>
  );
};

export default RegistrationFlow;