from fastapi import FastAPI, UploadFile, File
from bs4 import BeautifulSoup
import requests
import PyPDF2
import speech_recognition as sr
from PIL import Image
import pytesseract
from transformers import pipeline

app = FastAPI()

# Initialize NLP pipeline
summarizer = pipeline("summarization")
classifier = pipeline("zero-shot-classification")

async def analyze_website(url: str):
    """Analyze website content"""
    try:
        # Fetch website content
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # Extract text content
        text_content = ' '.join([p.get_text() for p in soup.find_all(['p', 'h1', 'h2', 'h3'])])
        
        # Analyze content
        return analyze_text(text_content)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

async def analyze_pdf(file: UploadFile):
    """Analyze PDF content"""
    try:
        pdf_reader = PyPDF2.PdfReader(file.file)
        text_content = ''
        for page in pdf_reader.pages:
            text_content += page.extract_text()
            
        return analyze_text(text_content)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

async def analyze_image(file: UploadFile):
    """Analyze image content using OCR"""
    try:
        image = Image.open(file.file)
        text_content = pytesseract.image_to_string(image)
        
        return analyze_text(text_content)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

async def analyze_audio(file: UploadFile):
    """Analyze audio content using speech recognition"""
    try:
        recognizer = sr.Recognizer()
        audio_file = sr.AudioFile(file.file)
        
        with audio_file as source:
            audio = recognizer.record(source)
        
        text_content = recognizer.recognize_google(audio)
        return analyze_text(text_content)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

def analyze_text(text_content: str):
    """Analyze text content using NLP"""
    # Generate summary
    summary = summarizer(text_content, max_length=150, min_length=50)[0]['summary_text']
    
    # Classify target audience
    audience_labels = ["B2B", "B2C", "Enterprise", "Small Business", "Consumer"]
    audience_result = classifier(text_content, audience_labels)
    
    # Extract value proposition
    value_prop = classifier(
        text_content,
        ["value proposition", "benefits", "unique selling point"]
    )
    
    # Extract keywords using NLP
    keywords = extract_keywords(text_content)
    
    return {
        "description": summary,
        "targetAudience": audience_result['labels'][0],
        "valueProposition": value_prop['labels'][0],
        "keyProducts": extract_products(text_content),
        "keywords": keywords
    }

@app.post("/api/analyze-url")
async def analyze_company_url(url: str):
    return await analyze_website(url)

@app.post("/api/analyze-file")
async def analyze_company_file(file: UploadFile = File(...)):
    file_extension = file.filename.split('.')[-1].lower()
    
    if file_extension in ['pdf']:
        return await analyze_pdf(file)
    elif file_extension in ['jpg', 'jpeg', 'png']:
        return await analyze_image(file)
    elif file_extension in ['mp3', 'wav']:
        return await analyze_audio(file)
    else:
        raise HTTPException(status_code=400, detail="Unsupported file type")