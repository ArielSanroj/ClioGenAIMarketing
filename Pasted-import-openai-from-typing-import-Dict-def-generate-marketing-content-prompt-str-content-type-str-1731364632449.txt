import openai
from typing import Dict

def generate_marketing_content(prompt: str, content_type: str) -> Dict:
    """Generate marketing content using OpenAI's API with improved parsing and error handling"""
    try:
        system_message = """You are an expert marketing content generator. 
        Generate content that matches the provided type, tone, and platform. 
        Format your response with the following clear sections:
        
        Title: [Create an engaging title]
        Content: [Provide detailed main content]
        Keywords: [List relevant keywords separated by commas]
        Target Audience: [Describe the target audience]
        
        Make sure each section is clearly separated by newlines and properly labeled."""
        
        response = openai.chat.completions.create(
            model="gpt-4-1106-preview",
            messages=[
                {"role": "system", "content": system_message},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=2000
        )
        
        generated_text = response.choices[0].message.content
        
        # Initialize content dictionary
        content_dict = {
            "title": "",
            "content": "",
            "keywords": [],
            "target_audience": "",
            "tone": content_type
        }
        
        # Split the text into sections and parse
        current_section = None
        current_content = []
        
        for line in generated_text.split('\n'):
            line = line.strip()
            if not line:
                continue
            
            if line.lower().startswith('title:'):
                current_section = 'title'
                content_dict['title'] = line.replace('Title:', '').strip()
            elif line.lower().startswith('content:'):
                if current_section == 'content':
                    content_dict['content'] = '\n'.join(current_content)
                current_section = 'content'
                current_content = []
            elif line.lower().startswith('keywords:'):
                if current_section == 'content':
                    content_dict['content'] = '\n'.join(current_content)
                current_section = 'keywords'
                keywords = line.replace('Keywords:', '').strip()
                content_dict['keywords'] = [k.strip() for k in keywords.split(',')]
            elif line.lower().startswith('target audience:'):
                if current_section == 'content':
                    content_dict['content'] = '\n'.join(current_content)
                current_section = 'target_audience'
                content_dict['target_audience'] = line.replace('Target Audience:', '').strip()
            else:
                if current_section == 'content':
                    current_content.append(line)
                elif current_section == 'target_audience':
                    content_dict['target_audience'] += ' ' + line
        
        # Handle any remaining content
        if current_section == 'content':
            content_dict['content'] = '\n'.join(current_content)
        
        return content_dict
        
    except Exception as e:
        print(f"Error generating content: {str(e)}")
        return {
            "title": "Error generating content",
            "content": f"An error occurred: {str(e)}",
            "keywords": [],
            "target_audience": "",
            "tone": content_type
        }

def validate_inputs(story: str, content_type: str) -> bool:
    """Validate input parameters before generating content"""
    if not story or not story.strip():
        return False
    if not content_type or not content_type.strip():
        return False
    return True