import streamlit as st
from components.sidebar import render_sidebar
from components.content_generator import render_content_generator
from components.social_media import render_social_media_campaign
from components.audience_analyzer import render_audience_analyzer
from components.seo_analyzer import render_seo_analyzer
from components.analyzer import render_analyzer
from styles import apply_custom_styles

def render_chat_interface():
    """Render the chat interface with suggested actions"""
    st.markdown("### ðŸ’¬ Chat with Clio AI")
    
    # Display action buttons
    if st.session_state.analyzed_data:
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if st.button("Generate Content Marketing", key="chat_content"):
                st.session_state.selected_option = "content"
                st.rerun()
        
        with col2:
            if st.button("Create Social Media Campaign", key="chat_social"):
                st.session_state.selected_option = "social"
                st.rerun()
        
        with col3:
            if st.button("Analyze Target Audience", key="chat_audience"):
                st.session_state.selected_option = "audience"
                st.rerun()
        
        with col4:
            if st.button("Generate SEO recommendations", key="chat_seo"):
                st.session_state.selected_option = "seo"
                st.rerun()

    # Chat messages
    if "messages" not in st.session_state:
        st.session_state.messages = []

    # Display chat messages
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    # Chat input
    if prompt := st.chat_input("What would you like to know about the analysis?"):
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)
        
        # Add AI response here
        response = "I understand you're asking about " + prompt
        with st.chat_message("assistant"):
            st.markdown(response)
        st.session_state.messages.append({"role": "assistant", "content": response})

def main():
    st.set_page_config(
        page_title="Clio - Marketing GenAI Assistant",
        page_icon="ðŸ¤–",
        layout="wide"
    )
    
    apply_custom_styles()
    
    # Initialize session states
    if 'selected_option' not in st.session_state:
        st.session_state.selected_option = None
    if 'show_chat' not in st.session_state:
        st.session_state.show_chat = False
    
    # Render sidebar
    selected_sidebar_option = render_sidebar()
    if selected_sidebar_option:
        st.session_state.selected_option = selected_sidebar_option
    
    # Main content container
    with st.container():
        st.title("Clio - Marketing GenAI Assistant")
        
        # Show analyzer first
        if not st.session_state.show_chat:
            render_analyzer()
        
        # Show chat interface after analysis
        else:
            render_chat_interface()
            
            # Render selected component based on chat actions
            if st.session_state.selected_option == "content":
                render_content_generator()
            elif st.session_state.selected_option == "social":
                render_social_media_campaign()
            elif st.session_state.selected_option == "audience":
                render_audience_analyzer()
            elif st.session_state.selected_option == "seo":
                render_seo_analyzer()

if __name__ == "__main__":
    main()